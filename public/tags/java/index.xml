<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on awilkins.id.au</title>
    <link>https://awilkins.id.au/tags/java/index.xml</link>
    <description>Recent content in Java on awilkins.id.au</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://awilkins.id.au/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java Pushy API</title>
      <link>https://awilkins.id.au/post/blogger/java-pushy-api/</link>
      <pubDate>Thu, 10 Feb 2011 20:42:00 +0000</pubDate>
      
      <guid>https://awilkins.id.au/post/blogger/java-pushy-api/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been some time since I&amp;rsquo;ve spruiked Pushy, so here we go.&amp;nbsp;One of my colleagues was talking the other day about how he had implemented a &lt;a href=&#34;http://nc110.sourceforge.net/&#34;&gt;netcat&lt;/a&gt;-like service for &lt;a href=&#34;http://staf.sourceforge.net/&#34;&gt;STAF&lt;/a&gt;, an automation framework aimed at testing. This got me thinking about how this could be done relatively easily, using the &lt;i&gt;pushy.net&lt;/i&gt;&amp;nbsp;package, something I haven&amp;rsquo;t written about much, primarily because it&amp;rsquo;s still a work in progress.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&#34;&gt;Back in version 0.3, I introduced a Java API to Pushy, as I mentioned in an&amp;nbsp;&lt;a href=&#34;http://axwalk.blogspot.com/2010/07/java-to-python.html&#34;&gt;earlier post&lt;/a&gt;. I briefly mentioned the incorporation of packages which mimic, and in many cases are interface compatible with, packages in the Java standard library such as &lt;i&gt;java.io&lt;/i&gt; and &lt;i&gt;java.net&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The &lt;i&gt;pushy.net&lt;/i&gt;&amp;nbsp;package currently contains three main classes:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;RemoteInetSocketAddress (extends java.net.InetSocketAddress)&lt;/li&gt;&lt;li&gt;RemoteSocket (extends java.net.Socket), and&lt;/li&gt;&lt;li&gt;RemoteServerSocket (extends java.net.ServerSocket).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;RemoteInetSocketAddress simply provides a means of creating an InetSocketAddress whose address is resolved at the remote host. RemoteSocket is a wrapper around a remote Python socket object, but extends java.net.Socket&amp;nbsp;to provide a familiar interface to Java developers. Similarly, RemoteServerSocket extends java.net.ServerSocket, and wraps a remote Python socket object.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So how about netcat emulation? Well, I won&amp;rsquo;t cover the whole implementation of a netcat clone, as that would be a non-trivial undertaking. But I will show you one of the fundamental requirements: to bind a server socket, accept a client connection, and print out the data received from that client.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step 1.&amp;nbsp;Bind a socket, and listen for connections.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:java&#34;&gt;import java.net.ServerSocket;&lt;br /&gt;import java.net.Socket;&lt;br /&gt;import pushy.Client;&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt;    public static void main(String[] args) throws Exception {&lt;br /&gt;        Client conn = new Client(&amp;ldquo;local:&amp;ldquo;);&lt;br /&gt;        try {&lt;br /&gt;            ServerSocket server = new pushy.net.RemoteServerSocket(conn, 0);&lt;br /&gt;            try {&lt;br /&gt;            } finally {&lt;br /&gt;                server.close();&lt;br /&gt;            }&lt;br /&gt;        } finally {&lt;br /&gt;            conn.close();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In this code snippet, we&amp;rsquo;re creating a RemoteServerSocket, and assigning it to a java.net.ServerSocket, to illustrate interface compatibility. The first argument to the constructor is the &lt;i&gt;pushy.Client&lt;/i&gt; object we previously created, and the second argument is the port to bind to. Specifying a port of zero, means that we want to bind to an ephemeral port.&lt;br /&gt;&lt;br /&gt;The creation of the RemoteServerSocket involves creating a Python socket object on the remote host, and performing the &lt;i&gt;bind&lt;/i&gt; and &lt;i&gt;listen&lt;/i&gt; methods on it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Step 2. Accept a client connection.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:java&#34;&gt;Socket client = server.accept();&lt;br /&gt;try {&lt;br /&gt;} finally {&lt;br /&gt;    client.close();&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here we can see that accepting a client connection is exactly as we would do with a standard java.net.ServerSocket. This probably isn&amp;rsquo;t surprising, since we&amp;rsquo;ve upcasted our RemoteServerSocket to a plain old ServerSocket. One thing of interest here is that the Server object returned is in fact a RemoteServerSocket, wrapping a remote Python socket object.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Step 3. Read data from the client connection.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:java&#34;&gt;InputStream in = client.getInputStream();&lt;br /&gt;byte[] buf = new byte[1024];&lt;br /&gt;int nread = in.read(buf, 0, buf.length);&lt;br /&gt;while (nread != -1) {&lt;br /&gt;    System.out.write(buf, 0, nread);&lt;br /&gt;    System.out.flush();&lt;br /&gt;    nread = in.read(buf, 0, buf.length);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Et voila! We can read the remote socket&amp;rsquo;s output via a java.io.InputStream object, returned by the &lt;i&gt;getInputStream&lt;/i&gt; method, which is overridden by RemoteSocket. One thing you may have noticed: to run this all on the local host, sans Pushy, you could substitute the right-hand side of the initial ServerSocket construction with a standard ServerSocket, and the rest of the code would remain unchanged.&lt;br /&gt;&lt;br /&gt;There are a few defects in the 0.3 release related to the pushy.net package, which will prevent these examples from working. I have rectified them in the process of writing this post. If you grab the trunk, it should all work nicely. There is &lt;a href=&#34;https://bugs.launchpad.net/pushy/+bug/716393&#34;&gt;one defect remaining&lt;/a&gt;: the InputStream returned by RemoteSocket is based on a a file returned by Python&amp;rsquo;s &lt;i&gt;socket.makefile&lt;/i&gt; method. This differs from the InputStream returned by Java&amp;rsquo;s standard Socket, in that a request for N bytes will not return until all N bytes, or EOF, are received. I hope to have this fixed in the coming days.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>