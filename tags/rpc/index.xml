<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rpc on awilkins.id.au</title>
    <link>https://awilkins.id.au/tags/rpc/index.xml</link>
    <description>Recent content in Rpc on awilkins.id.au</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://awilkins.id.au/tags/rpc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google App Engine Agent</title>
      <link>https://awilkins.id.au/post/blogger/google-app-engine-agent/</link>
      <pubDate>Thu, 01 Sep 2011 23:01:00 +0000</pubDate>
      
      <guid>https://awilkins.id.au/post/blogger/google-app-engine-agent/</guid>
      <description>&lt;p&gt;A couple of months ago I wrote about &lt;a href=&#34;http://blog.awilkins.id.au/2011/07/controlling-remote-agents-from-google.html&#34;&gt;my foray into the world of Google App Engine&lt;/a&gt;. More recently, I&amp;rsquo;d gotten the itch again, and had some ideas of how to fix the problems I found when attempting to get &lt;a href=&#34;http://awilkins.id.au/pushy/&#34;&gt;Pushy &lt;/a&gt;to work in&amp;nbsp;Google App Engine.&lt;br /&gt;&lt;br /&gt;The root of most of the problems is that&amp;nbsp;Google App Engine&amp;nbsp;is stateless in nature. Server instances can be spun up or spun down without notice, and so we can&amp;rsquo;t store complex state, which Pushy really requires. So a couple of weeks ago I set to investigating implementing a server-initiated RPC mechanism that is asynchronous and (mostly) stateless.&lt;br /&gt;&lt;br /&gt;How would it work? Well, earlier this year I read that &lt;a href=&#34;http://googleappengine.blogspot.com/2011/04/introducing-protorpc-for-writing-app.html&#34;&gt;ProtoRPC was released&lt;/a&gt;, which brought RPC services to Google App Engine. In our case, Google App Engine is the client, and is calling the agent - but we can at least reuse the API to minimise dependencies and hopefully simplify the mechanism. Okay, so we have a ProtoRPC service running on a remote machine, consumed by our Google App Engine application. How do they talk?&lt;br /&gt;&lt;br /&gt;One thing I wanted to avoid was the need for polling, as that&amp;rsquo;s both slow and expensive. Slow in that there will necessarily be delays between polls, and expensive in that unnecessary polls will burn CPU cycles in Google App Engine, which aren&amp;rsquo;t free. Long-polling isn&amp;rsquo;t possible, either, since HTTP requests are limited to 30 seconds of processing time. If you read my last post, you probably already know what I&amp;rsquo;m going to say: we&amp;rsquo;ll use XMPP.&lt;br /&gt;&lt;br /&gt;What&amp;rsquo;s XMPP? That&amp;rsquo;s the &lt;a href=&#34;http://xmpp.org/&#34;&gt;Extensible Messaging and Presence Protocol&lt;/a&gt;, which is the protocol underlying Jabber. It is also the primary protocol that Google Talk is built on. It&amp;rsquo;s an XML-based, client-server protocol, so peers do not talk directly to each other. It&amp;rsquo;s also asynchronous. So let&amp;rsquo;s look at the picture so far&amp;hellip;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The client (agent) and server (GAE application) talk to each other via XMPP.&lt;/li&gt;&lt;li&gt;The agent serves a ProtoRPC service, and the GAE application will consume it.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Because our RPC mechanism will be server-initiated, we&amp;rsquo;ll need something else: agent availability discovery. Google App Engine provides XMPP handlers for agent availability (and unavailability) notification. When an agent starts up it will register its presence with the application. When agent is discovered, the application will request the agent&amp;rsquo;s service descriptor. The agent will respond, and the application will store it away in Memcache.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We (ab)use Memcache for sharing of data between instances of the application. When you make enough requests to the application, Google App Engine may dynamically spin up a new instance to handle requests. By storing the service descriptor in Memcache, it can be accessed by any instance. I said abuse because Memcache is not guaranteed to keep the data you put in it - it may be expelled when memory is constrained. Really we should use Datastore, but I was too lazy to deal with cleaning it up. &amp;ldquo;Left as an exercise for the reader.&amp;rdquo; One thing I did make a point of using was to use the &lt;a href=&#34;http://goo.gl/cWCFe&#34;&gt;new Python Memcache CAS API&lt;/a&gt;, which allows for safe concurrent updates to Memcache.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Orrite. So now we have an agent and application which talk to each other via XMPP, using ProtoRPC. The application discovers the agent, and, upon request, the agent describes its service to the application. How can we use it? Well the answer is really &amp;ldquo;however you like&amp;rdquo;, but I have created a toy web UI for invoking the remote service methods.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-zkjIreamSFI/Tl-XUqoJCcI/AAAAAAAAA5E/NABDROL0wmM/s1600/gaea-ui.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;184&#34; src=&#34;http://4.bp.blogspot.com/-zkjIreamSFI/Tl-XUqoJCcI/AAAAAAAAA5E/NABDROL0wmM/s320/gaea-ui.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Wot &amp;lsquo;ave we &amp;lsquo;ere then? The drop-down selection has all of the available agent JIDs (XMPP IDs). The textbox has some Python code, which will be executed by the Google App Engine application. Yes, security alert! This is just a demonstration of how we can use the RPC mechanism - not a best practice. When you hit &amp;ldquo;Go!&amp;rdquo;, the code will be run by the application. But before doing so, the application will set a local variable &amp;ldquo;agent&amp;rdquo;, which is an instance of the ProtoRPC service stub bound to the agent selected in the drop-down.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;ProtoRPC is intended to be synchronous (from the looks of the comments in the code, anyway), but there is an asynchronous API for clients. But given that application requests can only take up to 30 seconds to service a request, our application can&amp;rsquo;t actively wait for a response. What to do? Instead, we need to complete the request asynchronously when the client responds, and convey some context to the response handler so it knows what to do with it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the demo, I&amp;rsquo;ve done something fairly straight forward with regards to response handling. When the UI is rendered, we create an asynchronous channel using the Channel API. We use this to send the response back to the user. So when the code is executed, the service stub is invoked, and the channel ID is passed as context to the client. When the client responds, it includes the context. Once again, security alert. We could fix security concerns by encrypting the context to ensure the client doesn&amp;rsquo;t tamper with it. Let&amp;rsquo;s just assume the client is friendly though, okay? Just this once!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So we finally have an application flow that goes something like this:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Agent registers service.&lt;/li&gt;&lt;li&gt;Server detects agent&amp;rsquo;s availability, and requests client&amp;rsquo;s service descriptor.&lt;/li&gt;&lt;li&gt;Client sends service descriptor, server receives and stores it in Memcache.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;and then&amp;hellip;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;User hits web UI, which server renders with a new channel.&lt;/li&gt;&lt;li&gt;User selects an agent and clicks &amp;ldquo;Go!&amp;rdquo;.&lt;/li&gt;&lt;li&gt;Server instantiates a service stub, and invokes it with the channel ID as context. The invocation sends an XMPP message to the agent.&lt;/li&gt;&lt;li&gt;Agent receives XMPP message, decodes and executes the request. The response is sent back to the server as an XMPP message, including the context set by the server.&lt;/li&gt;&lt;li&gt;The server receives the response, and extracts the response and channel ID (context). The response is formatted and sent to the channel.&lt;/li&gt;&lt;li&gt;The web UI&amp;rsquo;s channel Javascript callback is invoked and the response is rendered.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;b&gt;&lt;i&gt;Fin&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&amp;rsquo;ve put my code up on GitHub, here:&amp;nbsp;&lt;a href=&#34;http://github.com/axw/gaea&#34;&gt;http://github.com/axw/gaea&lt;/a&gt;.&amp;nbsp;Feel free to fork and/or have a play.&amp;nbsp;I hope this can be of use to someone. If nothing else, I&amp;rsquo;ve learnt a few new tricks!&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>